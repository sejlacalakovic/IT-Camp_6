// // Баци, и покушај... Ухвати... Коначно



// // Изјава tryдефинише блок кода за покретање (да покуша).

// // Изјава catchдефинише блок кода за руковање било којом грешком.

// // Изјава finallyдефинише блок кода који треба да се покрене без обзира на резултат.

// // Изјава throwдефинише прилагођену грешку.





// // Грешке ће се догодити!

// // Приликом извршавања ЈаваСцрипт кода могу се појавити различите грешке.

// // Грешке могу бити грешке у кодирању које је направио програмер,
// //  грешке због погрешног уноса и друге непредвидиве ствари.





// // ЈаваСцрипт покушај и ухвати

// // Изјава tryвам омогућава да дефинишете блок кода који ће бити тестиран на грешке док се извршава.

// // Наредба catchвам омогућава да дефинишете блок кода који ће се извршити ако дође до грешке у блоку покушаја.

// // ЈаваСцрипт изјаве tryи catch долазе у паровима:

// // try {
// //     Block of code to try
// //   }
// //   catch(err) {
// //     Block of code to handle errors
// //   }





// // ЈаваСцрипт доноси грешке

// // Када дође до грешке, ЈаваСцрипт ће се нормално зауставити и генерисати поруку о грешци.

// // Технички израз за ово је: ЈаваСцрипт ће избацити изузетак (избацити грешку) .


// // ЈаваСцрипт ће заправо креирати објекат Еррор са два својства: именом и поруком .






// // Изјава о бацању

// // Изјава throwвам омогућава да креирате прилагођену грешку.

// // Технички можете да избаците изузетак (избаците грешку) .

// // Изузетак може бити ЈаваСцрипт String, а Number, а Booleanили Object:

// // throw "Too big";    // throw a text
// // throw 500;          // throw a number





// // Ако користите throw заједно са tryи catch, можете да контролишете ток програма и генеришете прилагођене поруке о грешци.







// // Пример валидације уноса
// // Овај пример испитује унос. Ако је вредност погрешна, избацује се изузетак (ерр).

// // Изузетак (ерр) хвата наредба цатцх и приказује се прилагођена порука о грешци:

// function myFunction() {
//     const message = document.getElementById("p01");
//     message.innerHTML = "";
//     let x = document.getElementById("demo").value;
//     try { 
//       if(x == "")  throw "empty";
//       if(isNaN(x)) throw "not a number";
//       x = Number(x);
//       if(x < 5)  throw "too low";
//       if(x > 10)   throw "too high";
//     }
//     catch(err) {
//       message.innerHTML = "Input is " + err;
//     }
//   }





// Коначна изјава:

// Изјава finallyвам омогућава да извршите код, након покушаја и хватања, без обзира на резултат:

// Синтакса
// try {
//   Block of code to try
// }
// catch(err) {
//   Block of code to handle errors
// }
// finally {
//   Block of code to be executed regardless of the try / catch result
// }







// Пример
// function myFunction() {
//   const message = document.getElementById("p01");
//   message.innerHTML = "";
//   let x = document.getElementById("demo").value;
//   try {
//     if(x == "") throw "is empty";
//     if(isNaN(x)) throw "is not a number";
//     x = Number(x);
//     if(x > 10) throw "is too high";
//     if(x < 5) throw "is too low";
//   }
//   catch(err) {
//     message.innerHTML = "Error: " + err + ".";
//   }
//   finally {
//     document.getElementById("demo").value = "";
//   }
// }





// Објект Еррор

// ЈаваСцрипт има уграђени објекат грешке који пружа информације о грешци када дође до грешке.




// Објекат грешке пружа два корисна својства: име и поруку.





// Својства објекта грешке
// Својство	Опис
// име	Поставља или враћа име грешке
// порука	Поставља или враћа поруку о грешци (стринг)
// Вредности назива грешке
// Својство имена грешке може да врати шест различитих вредности:


// Еррор Наме	Опис
// ЕвалЕррор	Дошло је до грешке у функцији евал().
// РангеЕррор	Дошло је до броја „ван домета“.
// РеференцеЕррор	Дошло је до незаконите референце
// Синтаксна грешка	Дошло је до синтаксичке грешке
// ТипеЕррор	Дошло је до грешке у типу
// УРИЕррор	Дошло је до грешке у енцодеУРИ().
// Шест различитих вредности је описано у наставку.




// Евал Еррор

// Ан EvalErrorуказује на грешку у функцији евал().





// Новије верзије ЈаваСцрипт-а не бацају ЕвалЕррор. Уместо тога користите СинтакЕррор.




// Грешка у опсегу

// А RangeErrorсе баца ако користите број који је изван опсега дозвољених вредности.






// На пример: Не можете да подесите број значајних цифара броја на 500.

// Пример
// let num = 1;
// try {
//   num.toPrecision(500);   // A number cannot have 500 significant digits
// }
// catch(err) {
//   document.getElementById("demo").innerHTML = err.name
// }




// Референтна грешка

// А ReferenceErrorсе баца ако користите (референцирате) променљиву која није декларисана:

// Пример
// let x = 5;
// try {
//   x = y + 1;   // y cannot be used (referenced)
// }
// catch(err) {
//   document.getElementById("demo").innerHTML = err.name;
// }






// Синтаксна грешка

// А SyntaxErrorсе баца ако покушате да процените код са синтаксичком грешком.




// Пример
// try {
//   eval("alert('Hello)");   // Missing ' will produce an error
// }
// catch(err) {
//   document.getElementById("demo").innerHTML = err.name;
// }






// Откуцајте грешку

// А TypeErrorсе баца ако користите вредност која је изван опсега очекиваних типова:





// Пример
// let num = 1;
// try {
//   num.toUpperCase();   // You cannot convert a number to upper case
// }
// catch(err) {
//   document.getElementById("demo").innerHTML = err.name;
// }




// Грешка УРИ (униформни идентификатор ресурса).

// А URIErrorсе баца ако користите недозвољене знакове у УРИ функцији:

// Пример
// try {
//   decodeURI("%%%");   // You cannot URI decode percent signs
// }
// catch(err) {
//   document.getElementById("demo").innerHTML = err.name;
// };